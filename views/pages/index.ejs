<!DOCTYPE html>
<html lang="en">
    <head>
		<% include ../partials/header.ejs %>
    </head>
    <body>
	<nav>
		<% include ../partials/nav.ejs %>
	</nav>
        <main>            
            <div class="floatpage" id="default" >
				<form method="post" action="index.php">
					<div class="field-wrapper">
						<label>User Name</label>
						<input type="text" name="UserName">
					</div>
					<div class="field-wrapper">
						<label>Password</label>
						<input type="text" name="userPassword">
					</div>
					<div class="field-wrapper">
						<input type="submit" name="btnLogin" onclick=""></input>
					</div>
				</form>
            </div>
		</main>
    </body>
</html>
<script>
//set up temporary SESSION system user id. When I figure out how to set up actual login info, this will get replaced.
const SESS_UserId = 0;




/*
Upon entering the site --> DEFAULT is set to login info
Upon Login FAILURE --> Set DEFAULT to login information again and inform the user they messed up
Upon Login SUCCESS --> Reveal Navigation, set DEFAULT to Generate Menu button, set SESS_UserId to current sUserId
Upon Generate Menu button click --> Use session user ID to find x recipes by SESS_UserId and all associated Ingredients by Recipe_Id. Iterate through list and set DEFAULT TO div with all recipes and shopping list div with all ingredients
Upon Logout --> DEFAULT is set to login info
Upon Recipe Center Button Click --> Set DEFAULT to show buttons for Add Recipe, Edit Recipe, Delete Recipe, Set SESS_recipeId to NULL

Upon Add Recipe Button --> DEFAULT is set to form with recipe fields and Next Button
Upon Add Recipe Next Button --> call addRecipe, set SESS_recipeId to returned recipe_id, set DEFAULT to form with all associated ingredients, Add Ingredient fields, Ingredient Add Button, Instructions Button
Upon Ingredient Add Button --> call addIngredient, refresh the form
Upon Instructions Button --> set DEFAULT to form with all associated instructions, add Instruction Fields, Add Instructions button, Instruction Finish Button
Upon Instruction Add Button --> call add Instructions, refresh the form
Upon Finish Recipe Add Button --> Set DEFAULT to view recipe record, all ingredients, and all instructions

Upon Delete Recipe Button--> Set DEFAULT to list of recipes by SESS_UserId, with delete buttons by each
Upon Single Recipe Delete --> Set SESS_recipeId to selected recipe to delete, call deleteRecipeById, deleteInstructionByRecipeId, deleteIngreidentsByRecipeId, Set DEFAULT to confirmation

Upon Edit Recipe Button --> Set DEFAULT to list of Recipes by SESS_UserId with Edit buttons by each
Upon Edit Single Recipe Button --> Set DEFAULT to form with fields populated with recipe information and Edit Current Recipe Button, set SESS_recipeId to current recipe 
Upon Edit Current Recipe Button --> Call editRecipeById, set DEFAULT to list of ingredients by SESS_recipeId with Edit Current Ingredient Button on each, and Edit Instructions Button
Upon Edit Current Ingredient Button --> Call updateIngredientById and refresh DEFAULT to Upon Edit Current Recipe Button state
Upon Edit Instructions Button --> Call viewRecipeInstructions with Edit Current Instruction Buttons on each, and Finish Button
Upon Edit Current Instruction Button --> Call updateInstructionById and refresh DEFAULT to Upon Edit Instructions Button state

add callback functions to model functions
make controllers do all the work to get the right info to the views
https://video.byui.edu/media/313-11-spa-scriptures-part4-mvc/0_rsdj98mf



*/
	// Create XMLHttpRequest Object
	var aRequest = new XMLHttpRequest();

	//Make sure the request is finished
	//Check the ready state and stauts whenever the ready state changes
	aRequest.onreadystatechange = function () {
		//This function checks the ready state and status to make sure its finished and OK
		if (aRequest.readyState == 4 && aRequest.status == 200) {
			//Parse the JSON return
			var aGames = JSON.parse(aRequest.responseText);
			
			//Prepare JSON Data
			var aOutputString = "Name: " + aGames.recipe_name; 
			aOutputString += "<br>";
			aOutputString += "Description: " + aGames.recipe_desc;
			aOutputString += "<br>";
			aOutputString += "User Id: " + aGames.s_user_id;
			aOutputString += "<br>";
			
			// Print the response to the HTML
			document.getElementById('default').innerHTML = aOutputString;
		}
	}

	var aURL = "/viewRecipe?recipeId=1";
	
	// Open (initialize) the request
	aRequest.open("GET", aURL, true); // HTTP Request Method (GET, POST, etc.), 

	// Send the Request
	aRequest.send();
	
</script>